<resources>
    <string name="app_name">003 Cumulative Applications</string>

    <string name="app_name1">001 Magic Eightball</string>
    <string name="app_name2">002 To Do List</string>
    <string name="app_name3">003 Under Construction</string>
    <string name="app_name4">004 Calculator</string>
    <string name="app_name5">005 Cards</string>

    <string name="test_name1">003A Button Types</string>
    <string name="test_name2">003B Simple Programming Problems</string>
    <string name="test_name3">003C Template for Tests</string>
    <string name="test_name4">003D Testing Fragments</string>

    <string name="test1_btn1">Button 1</string>
    <string name="test1_tv1">How does button 1 work?</string>
    <string name="test1_btn2">Button 2</string>
    <string name="test1_tv2">How does button 2 work?</string>
    <string name="test1_btn3">Button 3</string>
    <string name="test1_tv3">How does button 3 work?</string>
    <string name="test1_btn4">Button 4</string>
    <string name="test1_tv4">How does button 4 work?</string>

    <string name="q_name1">Problems - Elementary</string>
    <string name="q_name2">Problems - Lists, Strings</string>
    <string name="q_name3">Problems - Intermediate</string>
    <string name="q_name4">Problems - Advanced</string>
    <string name="q_name5">Problems - GUI</string>
    <string name="q_name6">Problems - Open Ended</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment (via XML)</string>
    <string name="hello_java_fragment">Hello blank fragment (via Java)</string>
    <string name="add_fragment">Add fragment (via Java)</string>
    <string name="remove_fragment">Remove fragment (via Java)</string>

    <string name="back">List of Apps</string>
    <string name="tests">List of Tests</string>
    <string name="questions">List of Questions</string>

    <string name="a1_header">Ask The Magic 8 Ball</string>
    <string name="a1_greeting">Ask a question before you press!</string>

    <string name="a2_hint_text">Enter Item</string>
    <string name="a2_hint_btn">add</string>
    <string name="a2_hint_btn2">del</string>
    <string name="a2_hint_btn3">save</string>
    <string name="a2_hint_btn4">undo</string>

    <string name="a3_header">The whole app is the third app so this activity will have miscellaneous tests</string>
    <string name="a3a_header">This activity will be testing button implementation</string>
    <string name="a3b_header">Simple Programming Problems sourced from:
            https://adriann.github.io/programming_problems.html</string>
    <string name="a3b1_header">Elementary Questions</string>
    <string name="a3b2_header">Lists and Strings Questions</string>
    <string name="a3b3_header">Intermediate Questions</string>
    <string name="a3b4_header">Advanced Questions</string>
    <string name="a3b5_header">GUI Questions</string>
    <string name="a3b6_header">Open Ended Questions</string>
    <string name="a3c_header">This is a Template for Test Activities</string>
    <string name="a3d_header">This is for testing fragments</string>

    <string name="a3b_send_btn">send</string>

    <string name="a3b1_output">Please select a question</string>
    <string name="a3b1_answer">The solution will be printed here</string>
    <string name="a3b1_q2_hint">What is your name?</string>

    <string name="a3b1_q1">1. Write a program that prints ‘Hello World’ to the screen.</string>
    <string name="a3b1_q2">2. Write a program that asks the user for their name and greets them with their name.</string>
    <string name="a3b1_q3">3. Modify the previous program such that only the users Alice and Bob are greeted with their names.</string>
    <string name="a3b1_q4">4. Write a program that asks the user for a number n and prints the sum of the numbers 1 to n</string>
    <string name="a3b1_q5">5. Modify the previous program such that only multiples of three or five are considered in the sum, e.g. 3, 5, 6, 9, 10, 12, 15 for n=17</string>
    <string name="a3b1_q6">6. Write a program that asks the user for a number n and gives them the possibility to choose between computing the sum and computing the product of 1,…,n.</string>
    <string name="a3b1_q7">7. Write a program that prints a multiplication table for numbers up to 12.</string>
    <string name="a3b1_q8">8. Write a program that prints all prime numbers. (Note: if your programming language does not support arbitrary size numbers, printing all primes up to the largest number you can easily represent is fine too.)</string>
    <string name="a3b1_q9">9. Write a guessing game where the user has to guess a secret number. After every guess the program tells the user whether their number was too large or too small. At the end the number of tries needed should be printed. It counts only as one try if they input the same number multiple times consecutively.</string>
    <string name="a3b1_q10">10. Write a program that prints the next 20 leap years.</string>
    <string name="a3b1_q11">11. Write a program that computes the sum of an alternating series where each element of the series is an expression of the form ((-1)^{k+1})/(2 * k-1) for each value of k from 1 to a million, multiplied by 4.</string>

    <string name="a3b2_output">Please select a question</string>
    <string name="a3b2_answer">The solution will be printed here</string>
    <string name="a3b2_q1_hint">Please enter a list of values separated by ","</string>

    <string name="a3b2_q1">1. Write a function that returns the largest element in a list.</string>
    <string name="a3b2_q2">2. Write function that reverses a list, preferably in place.</string>
    <string name="a3b2_q3">3. Write a function that checks whether an element occurs in a list.</string>
    <string name="a3b2_q4">4. Write a function that returns the elements on odd positions in a list.</string>
    <string name="a3b2_q5">5. Write a function that computes the running total of a list.</string>
    <string name="a3b2_q6">6. Write a function that tests whether a string is a palindrome.</string>
    <string name="a3b2_q7">7. Write three functions that compute the sum of the numbers in a list: using a for-loop, a while-loop and recursion. (Subject to availability of these constructs in your language of choice.)</string>
    <string name="a3b2_q8">8. Write a function on_all that applies a function to every element of a list. Use it to print the first twenty perfect squares. The perfect squares can be found by multiplying each natural number with itself. The first few perfect squares are 1*1= 1, 2*2=4, 3*3=9, 4*4=16. Twelve for example is not a perfect square because there is no natural number m so that m*m=12. (This question is tricky if your programming language makes it difficult to pass functions as arguments.)</string>
    <string name="a3b2_q9">9. Write a function that concatenates two lists. [a,b,c], [1,2,3] → [a,b,c,1,2,3]</string>
    <string name="a3b2_q10">10. Write a function that combines two lists by alternatingly taking elements, e.g. [a,b,c], [1,2,3] → [a,1,b,2,c,3].</string>
    <string name="a3b2_q11">11. Write a function that merges two sorted lists into a new sorted list. [1,4,6],[2,3,5] → [1,2,3,4,5,6]. You can do this quicker than concatenating them followed by a sort.</string>
    <string name="a3b2_q12">12. Write a function that rotates a list by k elements. For example [1,2,3,4,5,6] rotated by two becomes [3,4,5,6,1,2]. Try solving this without creating a copy of the list. How many swap or move operations do you need?</string>
    <string name="a3b2_q13">13. Write a function that computes the list of the first 100 Fibonacci numbers. The first two Fibonacci numbers are 1 and 1. The n+1-st Fibonacci number can be computed by adding the n-th and the n-1-th Fibonacci number. The first few are therefore 1, 1, 1+1=2, 1+2=3, 2+3=5, 3+5=8.</string>
    <string name="a3b2_q14">14. Write a function that takes a number and returns a list of its digits. So for 2342 it should return [2,3,4,2].</string>
    <string name="a3b2_q15">15. Write functions that add, subtract, and multiply two numbers in their digit-list representation (and return a new digit list). If you’re ambitious you can implement Karatsuba multiplication. Try different bases. What is the best base if you care about speed? If you couldn’t completely solve the prime number exercise above due to the lack of large numbers in your language, you can now use your own library for this task.</string>
    <string name="a3b2_q16">16. Write a function that takes a list of numbers, a starting base b1 and a target base b2 and interprets the list as a number in base b1 and converts it into a number in base b2 (in the form of a list-of-digits). So for example [2,1,0] in base 3 gets converted to base 10 as [2,1].</string>
    <string name="a3b2_q17">17. Implement the following sorting algorithms: Selection sort, Insertion sort, Merge sort, Quick sort, Stooge Sort. Check Wikipedia for descriptions.</string>
    <string name="a3b2_q18">18. Implement binary search.</string>
    <string name="a3b2_q19">19. Write a function that takes a list of strings an prints them, one per line, in a rectangular frame. For example the list ["Hello", "World", "in", "a", "frame"] gets printed as:

*********
* Hello *
* World *
* in    *
* a     *
* frame *
*********</string>
    <string name="a3b2_q20">20. Write function that translates a text to Pig Latin and back. English is translated to Pig Latin by taking the first letter of every word, moving it to the end of the word and adding ‘ay’. “The quick brown fox” becomes “Hetay uickqay rownbay oxfay”.</string>

    <string name="a3b3_output">Please select a question</string>
    <string name="a3b3_answer">The solution will be printed here</string>
    <string name="a3b3_q2_hint">Please enter the duration of a year as a decimal "1.2" or a partial fraction "1+(2/3)"</string>

    <string name="a3b3_q1">1. Write a program that outputs all possibilities to put + or - or nothing between the numbers 1,2,…,9 (in this order) such that the result is 100. For example 1 + 2 + 3 - 4 + 5 + 6 + 78 + 9 = 100.</string>
    <string name="a3b3_q2">2. Write a program that takes the duration of a year (in fractional days) for an imaginary planet as an input and produces a leap-year rule that minimizes the difference to the planet’s solar year.</string>
    <string name="a3b3_q3">3. Implement a data structure for graphs that allows modification (insertion, deletion). It should be possible to store values at edges and nodes. It might be easiest to use a dictionary of (node, edgelist) to do this.</string>
    <string name="a3b3_q4">4. Write a function that generates a DOT representation of a graph.</string>
    <string name="a3b3_q5">5. Write a program that automatically generates essays for you.
a) Using a sample text, create a directed (multi-)graph where the words of a text are nodes and there is a directed edge between u and v if u is followed by v in your sample text. Multiple occurrences lead to multiple edges.
b) Do a random walk on this graph: Starting from an arbitrary node choose a random successor. If no successor exists, choose another random node.</string>
    <string name="a3b3_q6">6. Write a program that automatically converts English text to Morse code and vice versa.</string>
    <string name="a3b3_q7">7. Write a program that finds the longest palindromic substring of a given string. Try to be as efficient as possible!</string>
    <string name="a3b3_q8">8. Think of a good interface for a list. What operations do you typically need? You might want to investigate the list interface in your language and in some other popular languages for inspiration.</string>
    <string name="a3b3_q9">9. Implement your list interface using a fixed chunk of memory, say an array of size 100. If the user wants to add more stuff to your list than fits in your memory you should produce some kind of error, for example you can throw an exception if your language supports that.</string>
    <string name="a3b3_q10">10. Improve your previous implementation such that an arbitrary number of elements can be stored in your list. You can for example allocate bigger and bigger chunks of memory as your list grows, copy the old elements over and release the old storage. You should probably also release this memory eventually if your list shrinks enough not to need it anymore. Think about how much bigger the new chunk of memory should be so that your performance won’t be killed by allocations. Increasing the size by 1 element for example is a bad idea.</string>
    <string name="a3b3_q11">11. If you chose your growth right in the previous problem, you typically won’t allocate very often. However, adding to a big list sometimes consumes considerable time. That might be problematic in some applications. Instead try allocating new chunks of memory for new items. So when your list is full and the user wants to add something, allocate a new chunk of 100 elements instead of copying all elements over to a new large chunk. Think about where to do the book-keeping about which chunks you have. Different book keeping strategies can quite dramatically change the performance characteristics of your list.</string>
    <string name="a3b3_q12">12. Implement a binary heap. Once using a list as the base data structure and once by implementing a pointer-linked binary tree. Use it for implementing heap-sort.</string>
    <string name="a3b3_q13">13. Implement an unbalanced binary search tree.</string>
    <string name="a3b3_q14">14. Implement a balanced binary search tree of your choice. I like (a,b)-trees best.</string>
    <string name="a3b3_q15">15. Compare the performance of insertion, deletion and search on your unbalanced search tree with your balanced search tree and a sorted list. Think about good input sequences. If you implemented an (a,b)-tree, think about good values of a and b.</string>

    <string name="a3b4_output">Please select a question</string>
    <string name="a3b4_answer">The solution will be printed here</string>
    <string name="a3b4_q1_hint">Please enter a string in each space</string>

    <string name="a3b4_q1">1. Given two strings, write a program that efficiently finds the longest common subsequence.</string>
    <string name="a3b4_q2">2. Given an array with numbers, write a program that efficiently answers queries of the form: “Which is the nearest larger value for the number at position i?”, where distance is the difference in array indices. For example in the array [1,4,3,2,5,7], the nearest larger value for 4 is 5. After linear time preprocessing you should be able to answer queries in constant time.</string>
    <string name="a3b4_q3">3. Given two strings, write a program that outputs the shortest sequence of character insertions and deletions that turn one string into the other.</string>
    <string name="a3b4_q4">4. Write a function that multiplies two matrices together. Make it as efficient as you can and compare the performance to a polished linear algebra library for your language. You might want to read about Strassen’s algorithm and the effects CPU caches have. Try out different matrix layouts and see what happens.</string>
    <string name="a3b4_q5">5. Implement a van Emde Boas tree. Compare it with your previous search tree implementations.</string>
    <string name="a3b4_q6">6. Given a set of d-dimensional rectangular boxes, write a program that computes the volume of their union. Start with 2D and work your way up.</string>

    <string name="a4_header">This is simple/standard/advanced Calculator App</string>
    <string name="a4_mode_btn1">Simple</string>
    <string name="a4_mode_btn2">Standard</string>
    <string name="a4_mode_btn3">Advanced</string>
    <string name="a4_dec_btn1">Decimals</string>
    <string name="a4_dec_btn2">Rounding</string>
    <string name="a4_dec_left">&#60;</string>
    <string name="a4_dec_start">2</string>
    <string name="a4_dec_right">&#62;</string>
    <string name="a4_decimals">9</string>
    <string name="a4_default">0</string>
    <string name="a4_rounding">2</string>

    <string name="a4_btn11">MC</string>
    <string name="a4_btn12">MR</string>
    <string name="a4_btn13">M+</string>
    <string name="a4_btn14">M-</string>
    <string name="a4_btn21">1/x</string>
    <string name="a4_btn22">x^2</string>
    <string name="a4_btn23">X^(1/2)</string>
    <string name="a4_btn24">.</string>
    <string name="a4_btn31">7</string>
    <string name="a4_btn32">8</string>
    <string name="a4_btn33">9</string>
    <string name="a4_btn34">*</string>
    <string name="a4_btn41">4</string>
    <string name="a4_btn42">5</string>
    <string name="a4_btn43">6</string>
    <string name="a4_btn44">/</string>
    <string name="a4_btn51">1</string>
    <string name="a4_btn52">2</string>
    <string name="a4_btn53">3</string>
    <string name="a4_btn54">-</string>
    <string name="a4_btn61">C</string>
    <string name="a4_btn62">0</string>
    <string name="a4_btn63">=</string>
    <string name="a4_btn64">+</string>

</resources>